# -*- coding: utf-8 -*-
"""DL0101EN-3-1-Regression-with-Keras-py-v1.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QZOR9ZVuxzqLh771bpNutzTFU83GEIX5

<a href="https://cognitiveclass.ai/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDL0101ENSkillsNetwork20718188-2022-01-01"><img src = "https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/Logos/organization_logo/organization_logo.png" width = 400> </a>

<h1 align=center><font size = 5>Regression Models with Keras</font></h1>

## Introduction

Despite the popularity of more powerful libraries such as PyToch and TensorFlow, they are not easy to use and have a steep learning curve. So, for people who are just starting to learn deep learning, there is no better library to use other than the Keras library.

Keras is a high-level API for building deep learning models. It has gained favor for its ease of use and syntactic simplicity facilitating fast development. As you will see in this lab and the other labs in this course, building a very complex deep learning network can be achieved with Keras with only few lines of code. You will appreciate Keras even more, once you learn how to build deep models using PyTorch and TensorFlow in the other courses.

<h2>Regression Models with Keras</h2>

<h3>Objective for this Notebook<h3>    
<h5> 1. How to use the Keras library to build a regression model.</h5>
<h5> 2. Download and Clean dataset </h5>
<h5> 3. Build a Neural Network </h5>
<h5> 4. Train and Test the Network. </h5>

## Table of Contents

<div class="alert alert-block alert-info" style="margin-top: 20px">

<font size = 3>

1.  <a href="https://#item31">Download and Clean Dataset</a>
2.  <a href="https://#item32">Import Keras</a>
3.  <a href="https://#item33">Build a Neural Network</a>
4.  <a href="https://#item34">Train and Test the Network</a>

</font>
</div>

## Download and Clean Dataset

Let's start by importing the <em>pandas</em> and the Numpy libraries.
"""

# All Libraries required for this lab are listed below. The libraries pre-installed on Skills Network Labs are commented. 
# If you run this notebook on a different environment, e.g. your desktop, you may need to uncomment and install certain libraries.

#!pip install numpy==1.21.4
#!pip install pandas==1.3.4
#!pip install keras==2.1.6

import pandas as pd
import numpy as np

"""We will be playing around with the same dataset that we used in the videos.

<strong>The dataset is about the compressive strength of different samples of concrete based on the volumes of the different ingredients that were used to make them. Ingredients include:</strong>

<strong>1. Cement</strong>

<strong>2. Blast Furnace Slag</strong>

<strong>3. Fly Ash</strong>

<strong>4. Water</strong>

<strong>5. Superplasticizer</strong>

<strong>6. Coarse Aggregate</strong>

<strong>7. Fine Aggregate</strong>

Let's download the data and read it into a <em>pandas</em> dataframe.
"""

concrete_data = pd.read_csv('concrete_data.csv')
concrete_data.head()

"""So the first concrete sample has 540 cubic meter of cement, 0 cubic meter of blast furnace slag, 0 cubic meter of fly ash, 162 cubic meter of water, 2.5 cubic meter of superplaticizer, 1040 cubic meter of coarse aggregate, 676 cubic meter of fine aggregate. Such a concrete mix which is 28 days old, has a compressive strength of 79.99 MPa.

#### Let's check how many data points we have.
"""

concrete_data.shape

"""So, there are approximately 1000 samples to train our model on. Because of the few samples, we have to be careful not to overfit the training data.

Let's check the dataset for any missing values.
"""

concrete_data.describe()

concrete_data.isnull().sum()

"""The data looks very clean and is ready to be used to build our model.

#### Split data into predictors and target

The target variable in this problem is the concrete sample strength. Therefore, our predictors will be all the other columns.
"""

concrete_data_columns = concrete_data.columns

predictors = concrete_data[concrete_data_columns[concrete_data_columns != 'Strength']] # all columns except Strength
target = concrete_data['Strength'] # Strength column

predictors_norm = (predictors - predictors.mean()) / predictors.std() #Normalizing the data
predictors_norm.head()

"""<a id="item2"></a>

Let's do a quick sanity check of the predictors and the target dataframes.
"""

predictors_norm.head()

target.head()

"""Finally, the last step is to normalize the data by substracting the mean and dividing by the standard deviation.

Let's save the number of predictors to *n_cols* since we will need this number when building our network.
"""

n_cols = predictors_norm.shape[1] # number of predictors
print("Number of columns:", n_cols)

"""## Import Keras

"""

import keras

"""As you can see, the TensorFlow backend was used to install the Keras library.

Let's import the rest of the packages from the Keras library that we will need to build our regressoin model.
"""

from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import train_test_split  # Splitting the data for train and test using Scikit-Learn
from sklearn.metrics import mean_squared_error        # Library to calculate the squared error between y_true and y_predict

"""<a id='item33'></a>

## Build a Neural Network

Let's define a function that defines our regression model for us so that we can conveniently call it to create our model.
"""

# define regression model with 3 hidden layers of 10 neurons
def regression_model():
    # create model
    model = Sequential()
    model.add(Dense(10, activation='relu', input_shape=(n_cols,)))
    model.add(Dense(10, activation='relu'))
    model.add(Dense(10, activation='relu'))
    model.add(Dense(1))
    
    # compile model
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

"""The above function create a model that has two hidden layers, each of 50 hidden units.

## Train and Test the Network

Let's call the function now to create our model.
"""

# build the model
model = regression_model()
#Initialize the list to store 50 values of mean error squared 
mse = []

# Repeat 50 times
for i in range(0, 50):
 # Splitting data into 70% for training and 30% for testing
 X_train, X_test, y_train, y_test = train_test_split(predictors_norm, target, test_size=0.30)
 #Fitting the model with 50 epochs
 model.fit(X_train, y_train, validation_data = (X_test, y_test), epochs=50, verbose=2)
 #Predicting the value using test dataset to calculate the y_pred
 y_pred = model.predict(X_test)
 #Calculating mean squared error between y_true and y_pred
 error = mean_squared_error(y_test, y_pred)
 #Inserting the mean squared error for each time until 50 times
 mse.append(error)

print(mse)

import statistics #Importing this library to calculate the Standard Deviation 

print("Mean of the error list:", np.mean(mse))

print("Standard Deviation of the error list:", statistics.stdev(mse))

"""<hr>

Copyright Â© 2019 [IBM Developer Skills Network](https://cognitiveclass.ai/?utm_medium=dswb&utm_source=bducopyrightlink&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDL0101ENSkillsNetwork20718188-2022-01-01&utm_campaign=bdu). This notebook and its source code are released under the terms of the [MIT License](https://bigdatauniversity.com/mit-license/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDL0101ENSkillsNetwork20718188-2022-01-01).

"""